from spectral import *;
from integrator import *;
from pylab import *;
from diffusion import *;
import scipy as sp;
import pylab as m;
import sys;
import numpy as np;
from os.path import expanduser

home = expanduser("~");

resume = 0;
path = home+'/PVSawChannelLD1Beta5';

if(len(sys.argv) > 1):
    if(len(sys.argv) == 2):
    
        print "Resuming from";
        resume = int(sys.argv[1]);
        print resume;

N = 512;
h = 2*pi/N;

Beta = 5;
x = linspace(0,2*pi, N+1);
x = x[0:-1];
y = linspace(0,pi,N/2+1);
y = y[1:-1];
y1 = linspace(0,2*pi,N/2+2);
y1 = y1[0:-1];
Uimp = -0.0;

omega = 0.5*rand(N,N/2-1);
omega_p = 0.5*rand(N,N/2-1);
si = zeros((N,N/2-1));
for i in arange(N):
    for j in arange(N/2-1):
        si[i,j] = cos(x[i]+0.3) + 0.9*sin(3*(y1[j]+1.8) + 2*x[i]) + 0.87*sin(4*(x[i]-0.7) + (y1[j]+0.4) + 0.815) + 0.8*sin(5*(x[i]-4.3)+0.333) + 0.7*sin(7*y1[j]+0.111);

omega_p = partialX(si,2) + partialYSine(si,2) - si ;

n = N/2 -1;
for i in arange(n):
  
       if (i<n/6):
           omega[:,i]=0;
       elif (i >= n/6 and i<n/3):
           omega[:,i]=-10*(y[i] - pi/6);
       elif (i >= n/3 and i<n/2):
           omega[:,i]=-10*(y[i] - pi/3);
       elif (i >= n/2 and i<2*n/3):
           omega[:,i]=-10*(y[i] - pi/2);
       elif (i >= 2*n/3 and i<5*n/6):
           omega[:,i]=-10*(y[i] - 2*pi/3);	
       else:
           omega[:,i]=0;

omega = (omega + 0.001*omega_p*exp(-pow(y-pi/2,2)));


#for i in arange(N):
#    omega[i,:] = cos(2*x[i])*cos(2*y)*exp(-pow(y-pi/2,2));

#for i in arange(N):
#    for j in arange(N):
#        omega[i,j] = 2*cos(i*h)*sin(3*j*h);
#

def domegadt(dt, omega, args):
    """ 
        (psi_xx + psi_yy - psi) = omega. Invert, calculate u = -psi_y, v = psi_x
        omega_t = -(u*omega_x + v*omega_y + v + delta*psi)
    """
    (u,v, forcing) = args;

    return real(-(u*partialX(omega) + v*partialYSine(omega) + Beta*v + forcing));


def calcMax_omega(fields, args):
    omegaNew = fields;

    psi = InvPotentialVorticitySine(omegaNew);
    u = -partialYSine(psi);
    v = partialX(psi);
	
    maximum = \
        sqrt(amax((amax(u*u),amax(v*v))));
    print 'Max vel: ', maximum;
    return maximum;

def dSystemdt(dt,fields,args):
    omegaNew = fields;

    forcing = args;
    psi = InvPotentialVorticitySine(omegaNew);
    u = -partialYSine(psi);
    v = partialX(psi);
    dOmega = domegadt(dt, omegaNew, (u,v,forcing));
    #return(zeros((N,N/2-1)));
    return(dOmega);


def diffusion(dt, fields, args):

#    return fields;
    leny = fields.shape[1];    
    lenx = fields.shape[0];
    print lenx
    print leny
    newLen = 2*(leny+1);
    omegaNew = zeros((lenx,newLen));
    print shape(omegaNew);

    for i in arange(leny):
        omegaNew[:,i+1] = fields[:,i];

    for i in arange(leny):
        omegaNew[:,newLen-i-1] = fields[:,i];
    
    diffOmega = spectralDiffusion(dt, omegaNew, args);

    return(diffOmega[:,1:leny+1]);


stepper = integrator(h, [dSystemdt], \
                [diffusion], calcMax_omega,1);

ion();
omega_n = omega;
psi = InvPotentialVorticitySine(omega_n);

figure(figsize= (12,10));
subplot(221)


prev_t = 0;
tn2 = 0;
sec = 0;
#jet();

if(resume > 0):
   print 'Resuming from step: ',resume;
   omega_n = \
       np.load(path+'/eta_data_'+str(resume)+'.npy').transpose();
   sec = resume+10;
   prev_t = resume;


handle1 = imshow(omega_n.transpose(), vmin=-15,vmax=1, aspect='auto');
c4 = colorbar();
draw();

#figure(figsize= (10,8));
subplot(222)
handle2 = imshow(psi.transpose(), vmin=-15,vmax=1, aspect='auto');
c4 = colorbar();
draw();

subplot(223)
handle3 = imshow(-partialYSine(psi).transpose(), vmin=-15,vmax=1, aspect='auto');
c4 = colorbar();
draw();

subplot(224)
handle4 = imshow(partialX(psi).transpose(), vmin=-15,vmax=1, aspect='auto');
c4 = colorbar();
draw();


global_time = 0;
forcing = 0.0*rand(N,N/2 - 1);
forcingTime = 1;
tn = 0;

while (sec<1000):

    #forcing = rand(N,N);
    (dt,fields) = stepper.integrate(tn,omega_n,forcing);

    omega_n = fields;

    tn = dt + prev_t;
    prev_t = tn;
    print '============================='
    print 'Time Elapsed: ', tn;
    print '============================='

    if tn>forcingTime:
        print 'changing forcing';
        forcingTime += 1;
        forcing = 0.0*rand(N,N/2 - 1);

    if(tn > sec):


        print '==================================================================='

        print 'Time elapsed: ',tn;

        print '==================================================================='

        psi = InvPotentialVorticitySine(omega_n);
	handle1.set_array(omega_n.transpose());
	handle1.autoscale();

	handle2.set_array(psi.transpose());
	handle2.autoscale();
	handle3.set_array(-partialYSine(psi).transpose());
        handle3.autoscale();
        handle4.set_array(partialX(psi).transpose());
        handle4.autoscale();
        sec = sec+1;
        draw();
	np.save(path+'/PV'+str(sec)+'.npy',omega_n);
        savefig(path+'/fig'+str(sec)+'.png');

ioff();

